- name: Deploy waiting-time-backend
  hosts: main
  remote_user: ihar
  vars:
    deployment_dir: /home/ihar/deployments/waiting-time-backend

  tasks:
    - name: Install Docker to Python
      pip:
        name: "{{ item }}"
        state: present
      with_items:
        - docker
        - docker-compose

    - name: Copy configuration files
      copy:
        src: "{{ item }}"
        dest: "{{ deployment_dir }}"
        mode: 0644
      loop:
        - docker-compose.yml
        - nginx.conf
        - env.production

    - name: Ensure DATABASE_URL is set in env.production
      ansible.builtin.lineinfile:
        path: "{{ deployment_dir }}/env.production"
        regexp: '^DATABASE_URL='
        line: 'DATABASE_URL={{ DATABASE_URL }}'

    - name: Ensure POSTGRES_DB is set in env.production
      ansible.builtin.lineinfile:
        path: "{{ deployment_dir }}/env.production"
        regexp: '^POSTGRES_DB='
        line: 'POSTGRES_DB={{ POSTGRES_DB }}'

    - name: Ensure POSTGRES_USER is set in env.production
      ansible.builtin.lineinfile:
        path: "{{ deployment_dir }}/env.production"
        regexp: '^POSTGRES_USER='
        line: 'POSTGRES_USER={{ POSTGRES_USER }}'

    - name: Ensure POSTGRES_PASSWORD is set in env.production
      ansible.builtin.lineinfile:
        path: "{{ deployment_dir }}/env.production"
        regexp: '^POSTGRES_PASSWORD='
        line: 'POSTGRES_PASSWORD={{ POSTGRES_PASSWORD }}'

    - name: Pull updated Docker images and restart containers
      community.docker.docker_compose:
        project_src: "{{ deployment_dir }}"
        project_name: waiting-time-backend
        env_file: "{{ deployment_dir }}/env.production"
        pull: yes
        build: no
        remove_orphans: yes
        remove_volumes: yes
        state: present
        restarted: yes
